#Eduardo Alberto da Silva Gonçalves - Escola secundária Domingos Rebelo 2020
#Exemplo da criação de objectos a 3d ( cubos ) e respectivo movimento e rotação
#para utilização em ambiente Blender 2.8+

import bpy
from random import randint, random
from math import radians,sin,cos

#definição do número de cubos a criar
num_cubos_a_criar=50

#definição do número de frames pretendido
num_max_frames=360

# lista que irá guarda os cubos criados
l_cubos=[]

#lista que irá guardar as velocidades a atribuir a cada cubo
v=[]

#criação dos cubos

for i in range(0,num_cubos_a_criar):
    x=randint(-300,300)
    y=randint(-5,5)
    z=randint(0,50)
    bpy.ops.mesh.primitive_cube_add(enter_editmode=False, align='WORLD', location=(x, y, z))
    bpy.context.object.name = "cubo_"+str(i)
    l_cubos.append(bpy.context.active_object)

#atribuição de rotação e escala inciais dos cubos
for c in l_cubos:
    c.rotation_euler[0] = randint(0,360)
    c.rotation_euler[1] = randint(0,360)
    c.rotation_euler[2] = randint(0,360)
    c.scale[0] = random()*10+1
    c.scale[1] = random()*10+1
    c.scale[2] = random()*10+1

#atribuir velocidades para cada cubo em lista v ( com limites -5 a 5 )
for n,c in enumerate(l_cubos):
    v.append([randint(-5,5),randint(-5,5),randint(-5,5)])

    
#criação de keyframes com rotação dos cubos criados grau a grau em cada eixo x,y,z
for fn in range(1,num_max_frames,1):
    bpy.context.scene.frame_end = bpy.context.scene.frame_end +1
    for c in l_cubos:
        c.rotation_euler[0] = c.rotation_euler.x+radians(1)
        c.rotation_euler[1] = c.rotation_euler.y+radians(1)
        c.rotation_euler[2] = c.rotation_euler.z+radians(1)
        c.keyframe_insert(data_path="rotation_euler",frame=fn)

#criação do movimento para os cubos criados em função das velocidades respectivas
for fn in range(1,num_max_frames,1):
    for n,c in enumerate(l_cubos):
        c.location.x+=v[n][0]
        c.location.y+=v[n][1]
        c.location.z+=v[n][2]
        c.keyframe_insert(data_path="location",frame=fn)

